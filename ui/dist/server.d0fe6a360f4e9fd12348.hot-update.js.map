{"version":3,"sources":["webpack:///./src/components/Dashboard/LocationsNearby.jsx"],"names":["LocationsNearby","locations","setLocations","useState","useEffect","fetchData","match","search","showError","options","enableHighAccuracy","timeout","maximumAge","success","pos","console","log","crd","coords","_locations","findNearbyLocations","latitude","longitude","error","err","fetch","then","res","json","location","navigator","geolocation","getCurrentPosition","map","id"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;CAEA;;AACA;;AAEA,MAAMA,eAAe,GAAG,MAAM;AAC5B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,sDAAQ,EAA1C;AAEAC,yDAAS,CAAC,MAAM;AACdC,aAAS;AACV,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,SAAS,GAAG,OAAOC,KAAP,EAAcC,MAAd,EAAsBC,SAAtB,KAAoC;AACpD;AACA,QAAIC,OAAO,GAAG;AACZC,wBAAkB,EAAE,IADR;AAEZC,aAAO,EAAE,IAFG;AAGZC,gBAAU,EAAE;AAHA,KAAd;;AAMA,UAAMC,OAAO,GAAG,MAAOC,GAAP,IAAe;AAC7BC,aAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAIC,GAAG,GAAGH,GAAG,CAACI,MAAd;;AACA,YAAMC,UAAU,GAAG,MAAMC,oFAAmB,CAACH,GAAG,CAACI,QAAL,EAAeJ,GAAG,CAACK,SAAnB,CAA5C;;AACApB,kBAAY,CAACiB,UAAD,CAAZ;AACD,KALD;;AAOA,UAAMI,KAAK,GAAG,MAAOC,GAAP,IAAe;AAC3BT,aAAO,CAACC,GAAR,CAAY,KAAZ;AACAS,WAAK,CAAC,uBAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAEQ,MAAOG,QAAP,IAAoB;AACxB,cAAMV,UAAU,GAAG,MAAMC,oFAAmB,CAC1CS,QAAQ,CAACR,QADiC,EAE1CQ,QAAQ,CAACP,SAFiC,CAA5C;;AAIAP,eAAO,CAACC,GAAR,CAAYa,QAAZ,EAAsBV,UAAtB;AACAjB,oBAAY,CAACiB,UAAD,CAAZ;AACD,OATH;AAUD,KAZD;;AAcAW,aAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCnB,OAAzC,EAAkDU,KAAlD,EAAyDd,OAAzD;AACD,GA9BD;;AAgCA,sBACE;AAAK,aAAS,EAAC;AAAf,kBACE;AAAI,aAAS,EAAC;AAAd,4BADF,EAGGR,SAAS,IACRA,SAAS,CAACgC,GAAV,CAAeJ,QAAD,IAAc;AAC1B,wBAAO,2DAAC,0DAAD;AAAc,cAAQ,EAAEA,QAAxB;AAAkC,SAAG,EAAEA,QAAQ,CAACK;AAAhD,MAAP;AACD,GAFD,CAJJ,CADF;AAUD,CAjDD;;AAmDelC,8EAAf,E","file":"server.d0fe6a360f4e9fd12348.hot-update.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { findNearbyLocations } from \"../FindNearbyLocations.jsx\";\nimport LocationCard from \"../LocationCards.jsx\";\n// Import Swiper React components\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n\nconst LocationsNearby = () => {\n  const [locations, setLocations] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async (match, search, showError) => {\n    // get users position\n    var options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0,\n    };\n\n    const success = async (pos) => {\n      console.log(\"succes\");\n      var crd = pos.coords;\n      const _locations = await findNearbyLocations(crd.latitude, crd.longitude);\n      setLocations(_locations);\n    };\n\n    const error = async (err) => {\n      console.log(\"err\");\n      fetch(\"https://ipapi.co/json\")\n        .then((res) => res.json())\n        .then(async (location) => {\n          const _locations = await findNearbyLocations(\n            location.latitude,\n            location.longitude\n          );\n          console.log(location, _locations);\n          setLocations(_locations);\n        });\n    };\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n  };\n\n  return (\n    <div className=\"\">\n      <h2 className=\"text-black mb-4\">Locaties in de buurt</h2>\n\n      {locations &&\n        locations.map((location) => {\n          return <LocationCard location={location} key={location.id} />;\n        })}\n    </div>\n  );\n};\n\nexport default LocationsNearby;\n"],"sourceRoot":""}