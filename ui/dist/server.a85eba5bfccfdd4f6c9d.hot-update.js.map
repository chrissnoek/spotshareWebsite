{"version":3,"sources":["webpack:///./src/components/Dashboard/LocationsNearby.jsx"],"names":["LocationsNearby","locations","setLocations","useState","useEffect","fetchData","match","search","showError","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","_locations","findNearbyLocations","latitude","longitude","error","err","fetch","then","res","json","location","navigator","geolocation","getCurrentPosition","map","id"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;CAEA;;AACA;;AAEA,MAAMA,eAAe,GAAG,MAAM;AAC5B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,sDAAQ,EAA1C;AAEAC,yDAAS,CAAC,MAAM;AACdC,aAAS;AACV,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,SAAS,GAAG,OAAOC,KAAP,EAAcC,MAAd,EAAsBC,SAAtB,KAAoC;AACpD;AACA,QAAIC,OAAO,GAAG;AACZC,wBAAkB,EAAE,IADR;AAEZC,aAAO,EAAE,IAFG;AAGZC,gBAAU,EAAE;AAHA,KAAd;;AAMA,UAAMC,OAAO,GAAG,MAAOC,GAAP,IAAe;AAC7B,UAAIC,GAAG,GAAGD,GAAG,CAACE,MAAd;;AACA,YAAMC,UAAU,GAAG,MAAMC,oFAAmB,CAACH,GAAG,CAACI,QAAL,EAAeJ,GAAG,CAACK,SAAnB,CAA5C;;AACAlB,kBAAY,CAACe,UAAD,CAAZ;AACD,KAJD;;AAMA,UAAMI,KAAK,GAAG,MAAOC,GAAP,IAAe;AAC3BC,WAAK,CAAC,uBAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAEQ,MAAOG,QAAP,IAAoB;AACxB,cAAMV,UAAU,GAAG,MAAMC,oFAAmB,CAC1CS,QAAQ,CAACP,SADiC,EAE1CO,QAAQ,CAACP,SAFiC,CAA5C;;AAIAlB,oBAAY,CAACe,UAAD,CAAZ;AACD,OARH;AASD,KAVD;;AAYAW,aAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCjB,OAAzC,EAAkDQ,KAAlD,EAAyDZ,OAAzD;AACD,GA3BD;;AA6BA,sBACE;AAAK,aAAS,EAAC;AAAf,kBACE;AAAI,aAAS,EAAC;AAAd,4BADF,eAGE,2DAAC,mDAAD;AAAQ,gBAAY,EAAE,CAAtB;AAAyB,iBAAa,EAAC;AAAvC,KACGR,SAAS,IACRA,SAAS,CAAC8B,GAAV,CAAeJ,QAAD,IAAc;AAC1B,wBACE,2DAAC,wDAAD;AAAa,SAAG,EAAEA,QAAQ,CAACK;AAA3B,oBACE,2DAAC,0DAAD;AAAc,cAAQ,EAAEL,QAAxB;AAAkC,SAAG,EAAEA,QAAQ,CAACK;AAAhD,MADF,CADF;AAKD,GAND,CAFJ,CAHF,CADF;AAgBD,CApDD;;AAsDehC,8EAAf,E","file":"server.a85eba5bfccfdd4f6c9d.hot-update.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { findNearbyLocations } from \"../FindNearbyLocations.jsx\";\nimport LocationCard from \"../LocationCards.jsx\";\n// Import Swiper React components\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n\nconst LocationsNearby = () => {\n  const [locations, setLocations] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async (match, search, showError) => {\n    // get users position\n    var options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0,\n    };\n\n    const success = async (pos) => {\n      var crd = pos.coords;\n      const _locations = await findNearbyLocations(crd.latitude, crd.longitude);\n      setLocations(_locations);\n    };\n\n    const error = async (err) => {\n      fetch(\"https://ipapi.co/json\")\n        .then((res) => res.json())\n        .then(async (location) => {\n          const _locations = await findNearbyLocations(\n            location.longitude,\n            location.longitude\n          );\n          setLocations(_locations);\n        });\n    };\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n  };\n\n  return (\n    <div className=\"\">\n      <h2 className=\"text-white mb-4\">Locaties in de buurt</h2>\n\n      <Swiper spaceBetween={0} slidesPerView=\"auto\">\n        {locations &&\n          locations.map((location) => {\n            return (\n              <SwiperSlide key={location.id}>\n                <LocationCard location={location} key={location.id} />\n              </SwiperSlide>\n            );\n          })}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default LocationsNearby;\n"],"sourceRoot":""}