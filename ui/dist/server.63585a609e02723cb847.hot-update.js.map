{"version":3,"sources":["webpack:///./src/components/FindNearbyLocations.jsx"],"names":["findNearbyLocations","lat","lng","category","console","log","parseFloat","distance","radius","rad2deg","angle","deg2rad","maxlat","minlat","maxlng","Math","cos","minlng","distanceFromLocation","lat1","lon1","lat2","lon2","theta","dist","sin","acos","miles","query","search","cat","result","graphQLFetch","locations","length","filter","location","photos","forEach","locDistance","latitude","longitude","sort","a","b","keyA","Date","keyB"],"mappings":"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","file":"server.63585a609e02723cb847.hot-update.js","sourcesContent":["import graphQLFetch from \"../graphQLFetch.js\";\n\nexport const findNearbyLocations = async (lat, lng, category) => {\n  // calculate min and max latitudes\n  //echo 'submit';\n  //const lat = this.state.photo.latitude;\n  //const lng = this.state.photo.longitude;\n\n  category && console.log(category);\n\n  lat = parseFloat(lat);\n  lng = parseFloat(lng);\n\n  console.log(lat, lng);\n\n  const distance = 75; //in km\n  const radius = 6371; // earth's radius in km = ~6371\n\n  function rad2deg(angle) {\n    return angle * 57.29577951308232; // angle / Math.PI * 180\n  }\n\n  function deg2rad(angle) {\n    return angle * 0.017453292519943295; // (angle / 180) * Math.PI;\n  }\n\n  // latitude boundaries\n  const maxlat = lat + rad2deg(distance / radius);\n  const minlat = lat - rad2deg(distance / radius);\n\n  // longitude boundaries (longitude gets smaller when latitude increases)\n  const maxlng = lng + rad2deg(distance / radius / Math.cos(deg2rad(lat)));\n  const minlng = lng - rad2deg(distance / radius / Math.cos(deg2rad(lat)));\n\n  function distanceFromLocation(lat1, lon1, lat2, lon2) {\n    const theta = lon1 - lon2;\n    let dist =\n      Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.cos(deg2rad(theta));\n    dist = Math.acos(dist);\n    dist = rad2deg(dist);\n    const miles = dist * 60 * 1.1515;\n    return miles * 1.609344;\n  }\n\n  //$query = \"template=location, place.lat>=$minlat, place.lat<=$maxlat, place.lng>=$minlng, place.lng<=$maxlng \";\n\n  const query = `query locationsInRange($minlat:Float!, $maxlat:Float!, $minlng:Float!, $maxlng:Float! $cat:String){\n        locations(where:{latitude_gte:$minlat,latitude_lte:$maxlat,longitude_gte:$minlng,longitude_lte:$maxlng,location_categories:$cat}) {\n        title\n        longitude\n        latitude\n\t\tid\n\t\tlocation_categories {\n\t\t\tlabel\n      value\n      id\n\t\t\tlocations {\n        title\n        id\n\t\t\t}\n\t\t}\n\t\tslug\n        photos {\n            id\n            likes\n            title\n            slug\n            photo {\n                url \n            }\n        }\n        }\n      }`;\n\n  const search = {\n    minlat: parseFloat(minlat),\n    maxlat: parseFloat(maxlat),\n    minlng: parseFloat(minlng),\n    maxlng: parseFloat(maxlng),\n  };\n\n  if (category != \"\") {\n    search.cat = category;\n  }\n\n  //console.log(query, search);\n  const result = await graphQLFetch(query, search, true);\n\n  console.log(\"result from FindNearbyLocations\", result);\n\n  if (result.locations.length > 0) {\n    //console.log(\"found locations\", result.locations);\n    const locations = result.locations.filter(\n      (location) => location.photos.length > 0\n    );\n    //sort items on distance\n    locations.forEach((location) => {\n      // lat and lng are from this.state.photo\n      const locDistance = distanceFromLocation(\n        location.latitude,\n        location.longitude,\n        lat,\n        lng\n      );\n      location[\"distance\"] = locDistance;\n    });\n\n    locations.sort(function (a, b) {\n      var keyA = new Date(a.distance),\n        keyB = new Date(b.distance);\n      // Compare the 2 dates\n      if (keyA < keyB) return -1;\n      if (keyA > keyB) return 1;\n      return 0;\n    });\n\n    return locations;\n  } else {\n    return null;\n  }\n};\n"],"sourceRoot":""}