{"version":3,"sources":["webpack:///./src/PhotoList.jsx"],"names":["PhotoList","React","Component","fetchData","match","search","params","URLSearchParams","vars","get","category","query","data","graphQLFetch","constructor","photos","store","initialData","photoList","index","state","location","pathname","history","props","id","photoDelete","setState","prevState","newList","push","splice","loadData","componentDidUpdate","prevProps","prevSearch","componentDidMount","render","deletePhoto"],"mappings":"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","file":"server.8ffc058db24407ea0832.hot-update.js","sourcesContent":["/* globals React */\n/* eslint \"react/jsx-no-undef\":\"off\" */\n\nimport React, { Component } from \"react\";\nimport PhotoFilter from './PhotoFilter.jsx';\nimport PhotoCarousel from './PhotoCarousel.jsx';\nimport PhotoDetail from './PhotoDetail.jsx';\nimport graphQLFetch from './graphQLFetch.js';\nimport { Route, Link, NavLink } from \"react-router-dom\";\n\n/* to support IE */\nimport URLSearchParams from 'url-search-params';\nimport store from \"./store.js\";\n\nexport default class PhotoList extends React.Component {\n\n    static async fetchData(match, search) {\n        // get the search query string form url\n        //const { location: { search } } = this.props;\n\n        // use URLSearchParams for IE Compatibility\n        const params = new URLSearchParams(search);\n\n        // If category is provided in the query string, add them to our variables \n        const vars = {};\n        if (params.get('category')) vars.category = params.get('category');\n\n        // build the graphql query\n        const query = `query photoList($category: String) {\n        photoList(category: $category) {\n          id\n          title\n          date\n          created\n          images {\n            imageThumb\n            imageOriginal\n            imageWatermark\n          }\n        }\n      }`;\n\n        // provide the query with the variables \n        const data = await graphQLFetch(query, vars);\n        return data;\n    }\n\n    constructor() {\n        const photos = store.initialData ? store.initialData.photoList : null;\n        delete store.initialData;\n        super();\n        this.state = {\n            photos\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const { location: { search: prevSearch } } = prevProps;\n        const { location: { search } } = this.props;\n        if (prevSearch !== search) {\n            this.loadData();\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    deletePhoto = async (index) => {\n        const query = `mutation photoDelete($id: Int!) {\n            photoDelete(id: $id)\n        }`;\n        const { photos } = this.state;\n        const { location: { pathname, search }, history } = this.props;\n        const { id } = photos[index];\n        const data = await graphQLFetch(query, { id });\n        if (data && data.photoDelete) {\n            this.setState((prevState) => {\n                const newList = [...prevState.photos];\n                if (pathname === `/photos/${id}`) {\n                    history.push({ pathname: '/photos', search });\n                }\n                newList.splice(index, 1);\n                return { photos: newList };\n            })\n        } else {\n            this.loadData();\n        }\n    }\n\n    async loadData() {\n        // get the search query string form url\n        const { location: { search } } = this.props;\n\n        // use URLSearchParams for IE Compatibility\n        const params = new URLSearchParams(search);\n\n        // If category is provided in the query string, add them to our variables \n        const vars = {};\n        if (params.get('category')) vars.category = params.get('category');\n\n        // build the graphql query\n        const query = `query photoList($category: String) {\n        photoList(category: $category) {\n          id\n          title\n          date\n          created\n          images {\n            imageThumb\n            imageOriginal\n            imageWatermark\n          }\n        }\n      }`;\n\n        // provide the query with the variables \n        const data = await graphQLFetch(query, vars);\n        if (data) {\n            this.setState({ photos: data.photoList });\n        }\n    }\n\n    render() {\n        const { match } = this.props;\n        return (\n            <div id=\"page\" className=\"p-6\">\n                <h1>Recente foto's</h1>\n                <PhotoFilter />\n                <hr />\n                <PhotoCarousel photos={this.state.photos} deletePhoto={this.deletePhoto} />\n\n            </div >\n        );\n    }\n}"],"sourceRoot":""}