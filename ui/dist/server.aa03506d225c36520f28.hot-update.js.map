{"version":3,"sources":["webpack:///./src/graphQLFetch.js"],"names":["dateRegex","RegExp","jsonDateReviver","key","value","test","Date","graphQLFetch","query","variables","isBlog","returnError","apiEndpoint","__isBrowser__","window","process","env","UI_SERVER_API_ENDPOINT","response","fetch","method","headers","body","JSON","stringify","text","result","parse","errors","error","extensions","code","console","log","details","exception","join","toast","message","data","e"],"mappings":";;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA,MAAMA,SAAS,GAAG,IAAIC,MAAJ,CAAW,6BAAX,CAAlB;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqC;AACjC,MAAIJ,SAAS,CAACK,IAAV,CAAeD,KAAf,CAAJ,EAA2B,OAAO,IAAIE,IAAJ,CAASF,KAAT,CAAP;AAC3B,SAAOA,KAAP;AACH;;AAEc,eAAeG,YAAf,CAA4BC,KAA5B,EAAmCC,SAAS,GAAG,EAA/C,EAAmDC,MAAM,GAAG,KAA5D,EAAmEC,WAAW,GAAG,KAAjF,EAAwF;AACnG;AACA,MAAIC,WAAW,GAAIC,MAAD,GAAgB;AAC5BC,WADY,GAEZC,OAAO,CAACC,GAAR,CAAYC,sBAFlB;AAIAL,aAAW,GAAGF,MAAM,GAAG,+BAAH,GAAqCE,WAAzD;;AAEA,MAAI;AACA,UAAMM,QAAQ,GAAG,MAAMC,uDAAK,CAACP,WAAD,EAAc;AACtCQ,YAAM,EAAE,MAD8B;AAEtCC,aAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF6B;AAGtCC,UAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEhB,aAAF;AAASC;AAAT,OAAf;AAHgC,KAAd,CAA5B;AAKA,UAAMa,IAAI,GAAG,MAAMJ,QAAQ,CAACO,IAAT,EAAnB;AACA,UAAMC,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,IAAX,EAAiBpB,eAAjB,CAAf,CAPA,CASA;;AACA,QAAIwB,MAAM,CAACE,MAAX,EAAmB;AACf,YAAMC,KAAK,GAAGH,MAAM,CAACE,MAAP,CAAc,CAAd,CAAd;;AACA,UAAIC,KAAK,CAACC,UAAN,CAAiBC,IAAjB,IAAyB,gBAA7B,EAA+C;AAC3CC,eAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,cAAMK,OAAO,GAAGL,KAAK,CAACC,UAAN,CAAiBK,SAAjB,CAA2BP,MAA3B,CAAkCQ,IAAlC,CAAuC,KAAvC,CAAhB;AACAC,4DAAK,CAACR,KAAN,CAAa,GAAEA,KAAK,CAACS,OAAQ,MAAKJ,OAAQ,EAA1C;AACA,YAAIvB,WAAJ,EAAiB,OAAOe,MAAP;AACpB,OALD,MAKO;AACHW,4DAAK,CAACR,KAAN,CAAa,GAAEA,KAAK,CAACC,UAAN,CAAiBC,IAAK,MAAKF,KAAK,CAACS,OAAQ,EAAxD;AACAN,eAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,YAAIlB,WAAJ,EAAiB,OAAOe,MAAP;AACpB;AACJ;;AACD,WAAOA,MAAM,CAACa,IAAd;AACH,GAxBD,CAwBE,OAAOC,CAAP,EAAU;AACRH,wDAAK,CAACR,KAAN,CAAa,oCAAmCW,CAAC,CAACF,OAAQ,EAA1D;AACH;AACJ,C","file":"server.aa03506d225c36520f28.hot-update.js","sourcesContent":["\nimport { toast, ToastType } from 'react-toastify';\nimport fetch from 'isomorphic-fetch';\n\nconst dateRegex = new RegExp('^\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d');\n\nfunction jsonDateReviver(key, value) {\n    if (dateRegex.test(value)) return new Date(value);\n    return value;\n}\n\nexport default async function graphQLFetch(query, variables = {}, isBlog = false, returnError = false) {\n    //console.log('query from graphQlFetch ' + query)\n    let apiEndpoint = (__isBrowser__) // eslint-disable-line no-undef\n        ? window.ENV.UI_API_ENDPOINT\n        : process.env.UI_SERVER_API_ENDPOINT;\n\n    apiEndpoint = isBlog ? 'http://localhost:1337/graphql' : apiEndpoint;\n\n    try {\n        const response = await fetch(apiEndpoint, {\n            method: \"POST\",\n            headers: { \"Content-type\": \"application/json\" },\n            body: JSON.stringify({ query, variables })\n        });\n        const body = await response.text();\n        const result = JSON.parse(body, jsonDateReviver);\n\n        // alert the error message whenthe result is containing erros\n        if (result.errors) {\n            const error = result.errors[0];\n            if (error.extensions.code == \"BAD_USER_INPUT\") {\n                console.log(error);\n                const details = error.extensions.exception.errors.join(\"\\n \");\n                toast.error(`${error.message}\\n ${details}`);\n                if (returnError) return result;\n            } else {\n                toast.error(`${error.extensions.code}\\n ${error.message}`);\n                console.log(error);\n                if (returnError) return result;\n            }\n        }\n        return result.data;\n    } catch (e) {\n        toast.error(`Error in sending data to server: ${e.message}`);\n    }\n}"],"sourceRoot":""}